import React from 'react'; import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import AssistImage from '../AssistImage';
import {beforeEach, describe, expect, it, jest, test} from '@jest/globals';

import GenerateImage from "../../api/openAiApi"; // Import *after* mocking


/*
 let mockedGeneratedImage = jest.fn();
*/
 jest.mock('../../api/openAiApi');
 
describe('AssistImage Component Tests', () => {
  beforeEach(() => {
  })

  it.only('renders the component without errors', () => {
    render(<AssistImage />);
    // Check if the "Generate Image" button is present
    expect(screen.getByRole('button', { name: /Generate Image/i })).toBeDefined();
  });

/*
  it('calls the GenerateImage API and displays the image when the button is clicked', async () => {
    const mockiMAGEpROMPT = new Image('');
    GenerateImage.mockResolvedValue(mockiMAGEpROMPT);

    render(<AssistImage />);
    fireEvent.click(screen.getByRole('button', { name: /Generate Image/i }));

    // Check if the spinner is displayed while waiting for the API response
    expect(screen.getByRole('status')).toBeVisible();

    await waitFor(() => {
      // Check if the image is displayed with the correct source
      const image = screen.getByRole('img', { name: /Generated by OpenAI/i });
      expect(image).toBeDefined();
    });

*/
  /*  // Check if the spinner is hidden after the image loads
    expect(screen.getByRole('status')).not.toBeVisible();

  });



  it('handles API errors gracefully', async () => {
    GenerateImage.mockRejectedValue(new Error('API Error'));

    render(<AssistImage />);
    fireEvent.click(screen.getByRole('button', { name: /Generate Image/i }));

    // Check if the spinner is eventually hidden, even on error.
    await waitFor(() => expect(screen.queryByRole('status')).not.toBeVisible());

    // Add assertions to check for error handling behavior, e.g., an error message
    //  expect(screen.getByText(/Error generating image/i)).toBeVisible();  //  Requires displaying an error in the component
  });*/

 /* it('updates image size', async() => {
    render(<AssistImage selectedChat={'test'}/>);
    const newSize = 500;
    fireEvent.change(screen.getByPlaceholderText('350'), {target: { value: newSize}});
    expect(screen.getByPlaceholderText('350').value).toEqual(String(newSize));

    // Verify that this size gets used -  mock the api call as above, and check the width prop.
  })*/

  // Add more tests for other functionalities like:
  // - Clearing the image
  // - Handling different image sizes
  // - Edge cases (empty prompt, invalid prompt, etc.)

});